	Intel axxiaarm(64) Board Support Package


1. About this document
======================
This document describes the common and non-hardware specific information
about the Intel axxiaarm(64) board. Please refer to README.hardware
for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with Wind River
Linux and the wr-kernel layer.

Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.

Building the axxiaarm(64) layer
-------------------------------
This layer and wr-kernel layer should be added to bblayers.conf. This
is done automatically when using the Wind River configure wrapper.

Note:
To build an axxiaarm BSP, use:

    --machines axxiaarm

To build an axxiaarm64 BSP, use:

    --machines axxiaarm64

License
-------
Copyright (C) 2017 Wind River Systems, Inc.

The right to copy, distribute or otherwise make use of this software may
be licensed only pursuant to the terms of an applicable Wind River license
agreement. No license to Wind River intellectual properly rights is granted
herein. All rights not licensed by Wind River are reserved by Wind River.

Source code included in tree for individual recipes is under the LICENSE
stated in each recipe (.bb file) unless other stated.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+-------------+-------------+
  | valid/distro |   wrlinux   | wrlinux-cgl | wrlinux-ovp |
  +--------------+-------------+-------------+-------------+
  |    valid     |      Y      |      Y      |      N      |
  +--------------+-------------+-------------+-------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e | grep "^TARGET_SUPPORTED_KTYPES"'.

Note: The preempt-rt kernel type can be used with this BSP/Machine.


3. Board Specific Patches
=========================

To get a list of patches applied to the kernel specific to this BSP
along with patch descriptions use git whatchanged on the default
kernel (git whatchanged <kernel_type>..<bsp_name>). For example:

  # cd build/tmp-glibc/work-shared/axxiaarm/kernel-source
	# git whatchanged standard/base..

4. Boot Instructions
====================

4.1 axm55xx bootloader
----------------------

Booting the axm55xx Amarillo board is a three-stage process.

The 2nd and 3rd stages are both based on U-Boot, and both built from the
same source tree. The 2nd stage is quite limited, as it has to fit in LCM,
while the 3rd stage runs from system memory. System memory gets initialized
in  the 2nd stage, and the 3rd stage gets loaded at the base of system
memory.

4.1.1 u-boot images:
--------------------
The u-boot-spl.bin and u-boot.img are built from the git source code. They
are in the build/tmp-glibc/deploy/images/axxiaarm direcotry.The images can also
be got from layers/axxiaarm/bootloader/axm55xx.

 u-boot-spl.bin		--- The 2nd stage boot loader.
 u-boot.img			--- The 3rd stage boot loader.
 AXM55xx_1p0.bin	--- The parameter table file for boot loader.

4.1.2 Updating the 2nd stage boot loader:
--------------------------------------

The old u-boot using ssp command to write spi flash, In the latest
u-boot, ssp command is replace by sf.

	# tftp 0x4000000 u-boot-spl.bin

	# ssp w 0 0x4000000 0x0 0x40000
or
	# sf probe 0
	# sf erase 0 0x40000
	# sf write 0x4000000 0 0x40000

4.1.3 Updating the 3rd stage boot loader:
--------------------------------------
	# tftp 0x4000000 u-boot.img

	# ssp w 0 0x4000000 0x100000 0x200000
or
	# sf erase 0x100000 0x200000
	# sf write 0x4000000 0x100000 0x200000


4.1.4 Updating the parameter:
--------------------------
	# tftp 0x4000000 AXM55xx_1p0.bin

	# ssp w 0 0x4000000 0x40000 0x10000
or
	# sf erase 0x40000 0x10000
	# sf write 0x4000000 0x40000 0x10000

4.2 axm56xx bootloader
----------------------

Booting the axm56xx Victoria board is a three-stage process.

The 2nd and 3rd stages are both based on U-Boot, and both built from the
same source tree. The 2nd stage is quite limited, as it has to fit in LCM,
while the 3rd stage runs from system memory. System memory gets initialized
in  the 2nd stage, and the 3rd stage gets loaded at the base of system
memory.

4.2.1 u-boot images:
-------------------
The u-boot-spl.img and u-boot.img are built from the git source code. They
are in the build/tmp-glibc/deploy/images/axxiaarm64 direcotry.The images can also
be got from layers/axxiaarm/bootloader/axm56xx.

 u-boot-spl.img		--- The 2nd stage boot loader.
 u-boot.img			--- The 3rd stage boot loader.
 AXM5600.bin		--- The parameter table file for boot loader.

4.2.2 Updating the 2nd stage boot loader:
--------------------------------------

The old u-boot using ssp command to write spi flash, In the latest
u-boot, ssp command is replace by sf.

	# tftp 0x4000000 u-boot-spl.img

	# ssp w 0 0x4000000 0x0 0x40000
or
	# sf probe 0
	# sf erase 0 0x40000
	# sf write 0x4000000 0 0x40000

4.2.3 Updating the 3rd stage boot loader:
--------------------------------------
	# tftp 0x4000000 u-boot.img

	# ssp w 0 0x4000000 0x100000 0x200000
or
	# sf erase 0x100000 0x200000
	# sf write 0x4000000 0x100000 0x200000


4.2.4 Updating the parameter:
--------------------------
	# tftp 0x4000000 AXM5600.bin

	# ssp w 0 0x4000000 0x80000 0x10000
or
	# sf erase 0x80000 0x10000
	# sf write 0x4000000 0x80000 0x10000

4.3 NFS Root File System
------------------------

Configure u-boot with target IP, tftp server, netmask and other required
network values, and as below is an example for axm56xx:

 u-boot=> setenv ethact NEMAC
 u-boot=> setenv fdt_high 0x20000000
 u-boot=> setenv ipaddr <target IP>
 u-boot=> setenv serverip <nfs server IP>
 u-boot=> setenv gatewayip <gateway IP>
 u-boot=> setenv netmask <netmask>
 u-boot=> setenv rootpath <nfs root>
 u-boot=> tftp 0x4000000 uImage
 u-boot=> tftp 0x24800000 axm5616-victoria.dtb
 u-boot=> setenv bootargs console=ttyAMA0 root=/dev/nfs rw \
          nfsroot=$(serverip):$(rootpath) \
          ip=$(ipaddr)::$(gatewayip):$(netmask)::eth0:off
 u-boot=> bootm 0x4000000 - 0x24800000

And as below is an example for axm55xx:

 u-boot=> setenv ethact LSI_FEMAC
 u-boot=> setenv ad_value 0x61
 u-boot=> setenv bootm_high 0x20000000
 u-boot=> setenv bootm_low 0x10000000
 u-boot=> setenv fdt_high 0xffffffff
 u-boot=> setenv macspeed 100MF
 u-boot=> setenv ipaddr <target IP>
 u-boot=> setenv serverip <nfs server IP>
 u-boot=> setenv gatewayip <gateway IP>
 u-boot=> setenv netmask <netmask>
 u-boot=> setenv rootpath <nfs root>
 u-boot=> tftp 0x4000000 uImage
 u-boot=> tftp 0x4500000 axm5516-amarillo.dtb
 u-boot=> setenv bootargs console=ttyAMA0,115200 root=/dev/nfs rw \
          nfsroot=$(serverip):$(rootpath) \
          ip=$(ipaddr)::$(gatewayip):$(netmask)::eth0:off
 u-boot=> bootm 0x4000000 - 0x4500000

5. Axxiaarm board Features
==========================

5.1 OProfile
------------

This BSP does not have an available hardware performance counter,
so OProfile must resort to the timer mode. If you are using OProfile
you need to add "oprofile.timer=1" to the kernel boot options.

5.2 kexec/kdump
---------------

For discussion purposes, some useful terminology will be described here.

boot kernel - the first kernel that you start and supports kexec, from u-boot
	          for instance.
capture kernel - the kernel that you reboot into after a boot kernel crash.

To build the boot or capture kernel, use the following option with the configure
command for your project:

     --template=feature/kexec,feature/kdump

5.2.1 kexec
-----------
For capture kernel:
Before boot capture kernel, please add "maxcpus=1" to the boot parameter.

5.2.2 kdump
-----------
For boot kernel:
Now kdump in axm55xx can only support memory size less than 4G because that
32-bit elf header can't describe a vmcore the memory size of which is bigger
than 4G. So need pass "crashkernel=256M@256M mem=4096M" via the command line.

For capture kernel:
Before boot capture kernel, please add "maxcpus=1" to the boot parameter.

5.3 Ramdisk
-----------

Before using ramdisk, please set initrd_high to 0xffffffff to implies that the
initrd are initially copied to working addresses. This will avoid an additional
copy. otherwise initrd will be relocated to random address.

	In the u-boot terminal:
	$ setenv initrd_high 0xffffffff

And the ramdisk must be download to the lowmem region.

Note:
lowmem: linux memory that is always mapped into the kernel's address space.

6. Axxiaarm64 board Features
============================

6.1 OProfile
------------

This BSP does not have an available hardware performance counter,
so OProfile must resort to the timer mode. If you are using OProfile
you need to add "oprofile.timer=1" to the kernel boot options.

6.2 kexec/kdump
---------------

To build the boot or capture kernel, use the following option with the configure
command for your project:

     --template=feature/kexec,feature/kdump

6.2.1 kexec
-----------
For capture kernel:
Before boot capture kernel, please add "maxcpus=1" to the boot parameter.

6.2.2 kdump
-----------
For boot kernel:
To reserve a memory region for the capture kernel, pass "crashkernel=256M@0"
via the command line.

For capture kernel:
Please use "Image" as boot capture kernel which can be found in the path
build/tmp-glibc/deploy/images/axxiaarm64. Before boot capture kernel, please add
"maxcpus=1" to the boot parameter.

6.3 Ramdisk
-----------

Before using ramdisk, please set initrd_high to 0xffffffff to implies that the
initrd are initially copied to working addresses. This will avoid an additional
copy. otherwise initrd will be relocated to random address.

	In the u-boot terminal:
	$ setenv initrd_high 0xffffffff

And the ramdisk must be download to the lowmem region.

Note:
lowmem: linux memory that is always mapped into the kernel's address space.

6.4 Multilib
-----------

By default, when you configure project with --enable-board=axxiaarm64,
the BSP is configured as a 64-bit kernel and 64-bit userspace.

Multilib is also supported by this BSP.

1. To add 32-bit multilib support for an existing project, use:

    bitbake lib32-wrlinux-image-glibc-std

2. To add 32-bit mulilib support for a specific package, use:

    bitbake lib32-<pkg-name>
